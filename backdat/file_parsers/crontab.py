"""
helpers for reading/writing to /etc/cron.d/backdat
"""

import logging
from datetime import datetime

BACKDAT_PATH = "/opt/backdat/backdat.py"
CRON_FILE_PATH = "/etc/cron.d/backdat"  # NOTE: not cross-platform
CRON_TIME_FMT = "%M %H * * *" # %d %m %w"

def write_crontab(time_to_schedule):
    """
    Parameters
    ---------------
    time_to_schedule : datetime.datetime
        exact time of the start of the next backup window
    """
    logger = logging.getLogger(__name__)
    cmd = ' root {}'.format(BACKDAT_PATH)
    cronstr = time_to_schedule.strftime(CRON_TIME_FMT)

    with open(CRON_FILE_PATH, 'w') as cronfile:
        cronfile.write("# this file auto-generated by backdat.\n")
        cronfile.write(cronstr + ' ' + cmd + '\n')
        # TODO: add some form of alert that triggers if we get to the
        #   next next time and this file hasn't been overwritten.
        #   ( this would mean that the cron didn't trigger or backdat
        #   is failing in a way that prevents it from scheduling )

    logger.info("next backup scheduled to start @ " + cronstr)

def get_next_cron_report():
    """
    returns pretty printout describing next job scheduled with cron
    """
    try:
        with open(CRON_FILE_PATH, 'r') as cfile:
            for line in cfile:
                if line.startswith("#"):
                    pass
                else:
                    crstr = line.split(" ")[0:5]
                    # rt = line.split(" ")[6]
                    # exepath = line.split(" ")[7]
                    # args = line.split(" ")[8:]
                    next_backup = datetime.strptime(" ".join(crstr), CRON_TIME_FMT)
                    return "next backup: " + next_backup.strftime("%m-%d %H:%M")
    except FileNotFoundError as f_err:
        return "No backup scheduled (cron.d/backdat not found)"
